$date
	Fri May 03 13:03:45 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var wire 32 ! write_data [31:0] $end
$var wire 32 " pc [31:0] $end
$var wire 32 # alu_result [31:0] $end
$var reg 1 $ clk $end
$var reg 32 % instruction [31:0] $end
$var reg 32 & read_data [31:0] $end
$var reg 1 ' reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 32 ( instruction [31:0] $end
$var wire 32 ) read_data [31:0] $end
$var wire 1 ' reset $end
$var wire 32 * rs1_data [31:0] $end
$var wire 32 + rs2_data [31:0] $end
$var wire 32 , sign_extended_imm [31:0] $end
$var wire 32 - write_data [31:0] $end
$var wire 5 . rs2 [4:0] $end
$var wire 5 / rs1 [4:0] $end
$var wire 5 0 rd [4:0] $end
$var wire 7 1 opcode [6:0] $end
$var wire 7 2 funct7 [6:0] $end
$var wire 3 3 funct3 [2:0] $end
$var reg 32 4 alu_out [31:0] $end
$var reg 32 5 alu_result [31:0] $end
$var reg 32 6 next_pc [31:0] $end
$var reg 32 7 pc [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 7
b0 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b1111011 ,
bx +
bx *
bx )
bx (
1'
bx &
bx %
0$
bx #
b0 "
bx !
$end
#5
1$
#10
b1001 4
b110011 1
b1000 0
b101 *
b1010 /
b100 +
b1011 .
b0 3
b0 2
0$
b101101010000010000110011 %
b101101010000010000110011 (
b1111011 &
b1111011 )
0'
#15
b100 6
b1001 #
b1001 5
1$
#20
b101 4
b110 3
0$
b101101010110010000110011 %
b101101010110010000110011 (
#25
b100 "
b100 7
b1001 !
b1001 -
b101 #
b101 5
1$
#30
b100 4
b111 3
0$
b101101010111010000110011 %
b101101010111010000110011 (
#35
b1000 6
b100 #
b100 5
b101 !
b101 -
1$
#40
b0 4
b10 3
0$
b101101010010010000110011 %
b101101010010010000110011 (
#45
b1000 "
b1000 7
b100 !
b100 -
b0 #
b0 5
1$
#50
b10000000 4
b10011 1
bx +
b0 .
b0 3
0$
b1010000010000010011 %
b1010000010000010011 (
#55
b1100 6
b10000000 #
b10000000 5
b0 !
b0 -
1$
#60
b1 4
b10 3
0$
b1010010010000010011 %
b1010010010000010011 (
#65
b1100 "
b1100 7
b10000000 !
b10000000 -
b1 #
b1 5
1$
#70
b111 3
0$
b1010111010000010011 %
b1010111010000010011 (
#75
b10000 6
b1 !
b1 -
1$
#80
b1111111 4
b110 3
0$
b1010110010000010011 %
b1010110010000010011 (
#85
b10000 "
b10000 7
b1111111 #
b1111111 5
1$
#90
b10000000 4
b11 1
b100 .
b10 3
0$
b10001010010010000000011 %
b10001010010010000000011 (
#95
b10100 6
b1111011 #
b1111011 5
b1111111 !
b1111111 -
1$
#100
b11111010 4
b100011 1
b101 !
b101 -
b1010 0
b1111111 *
b1000 /
0$
b10001000010010100100011 %
b10001000010010100100011 (
#105
b10100 "
b10100 7
b1111011 !
b1111011 -
1$
#110
b1101111 1
b1111111 !
b1111111 -
b1000 0
bx *
b0 /
b0 .
b0 3
b1 2
0$
b10000000000000010001101111 %
b10000000000000010001101111 (
#115
b10001111 6
b11111010 #
b11111010 5
1$
#120
0$
#125
b10001111 "
b10001111 7
1$
#130
b1100011 1
bx !
bx -
b0 0
b1111011 *
b1010 /
b100 +
b1011 .
b0 2
0$
b101101010000000001100011 %
b101101010000000001100011 (
#135
b11111010 !
b11111010 -
1$
#140
b1111110 4
b110011 1
b1111111 !
b1111111 -
b1000 0
b11 +
b1100 .
0$
b110001010000010000110011 %
b110001010000010000110011 (
#145
b10010011 6
b11111010 !
b11111010 -
b1111110 #
b1111110 5
1$
#150
b100 +
b1011 .
b101 3
b100000 2
b11111111111111111111111110000011 4
0$
b1000000101101010101010000110011 %
b1000000101101010101010000110011 (
b11111111111111111111100000110000 *
#155
b10010011 "
b10010011 7
b11111111111111111111111110000011 #
b11111111111111111111111110000011 5
b1111110 !
b1111110 -
1$
#160
0$
